@inherits MudComponentBase

@inject IScooterService scooterService

<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Title" @bind-Value="model.Title"
                                  For="@(() => model.Title)"
                                  Required="true"
                                  RequiredError="Title is required!"
                                  >
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectBrand" T="int" Label="Brand" @bind-Value="model.BrandId" For="@(() => model.BrandId)">
                        <MudSelectItem T="int" Value="0">&nbsp;</MudSelectItem>
                        @foreach (var brand in _brands)
                        {
                            <MudSelectItem T="int" Value="@brand.Id">@brand.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" >
                    <MudTextField Label="Description"
                                  Lines="5"
                                  For="@(() => model.Description)"
                                  @bind-Value="model.Description"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm form = default!;
    MudSelect<int> selectBrand = default!;

    ScooterModelValidator modelValidator = new ScooterModelValidator();

    bool isNew = false;

    [Parameter]
    public int? ScooterId { get; set; } = default;

    [Parameter]
    public ScooterModel model { get; set; } = new() { BrandId = 0 };

    private List<BrandModel> _brands { get; set; } = new List<BrandModel>();

    protected override async Task OnInitializedAsync()
    {
        var data = await scooterService.GetBrandList();
        _brands.AddRange(data);

        isNew = ScooterId == null;
        if (!isNew)
        {
            var scooter = await scooterService.GetScooter(ScooterId ?? 0);

            model.Id = scooter.Id;
            model.BrandId = scooter.BrandId;
            model.Title = scooter.Title;
            model.Description = scooter.Description;
        }

        await selectBrand.SelectOption(model.BrandId);
        form.ResetValidation();
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
